

  -- Keep to-do list up to date
  -- Literature
    : MiniSat paper
      : online?
      : look-at before paper for overview: https://www.msoos.org/minisat-faq/
    : Web-of-needs, and other related projects
    : cycle cover problems
    : Just how to find cycles in directed graphs. Period.
    : Market performance metrics
  -- Write up specification of offer networks
    : Start minimal
    : Specify addable/desirable features
  -- Determine problem complexity and adaptable algorithms
    : Start minimal
    : Note especially when complexity class/order changes
    : Are there gaps in literature of algorithms for any of these variants?
  -- Look into frameworks/languages that can be used
    : Programming language? Rust? (>_> Maybe just because I want to learn it.)
    : Use some graph database? (neo4j? -- There are Rust crates to access it.)
  -- Look into realistic demographics for ON (offer network) instances
    : perhaps via e-bay developers program API?
  -- Write code to generate ON instances (based on parameters)
  -- Adapt library / implement algorithm to match on instances
  -- Set up together as Simulator for experiments
  -- Run trials & measurements
    : Test, test, test!
  -- If time permits, try to extend features.
    : which methods would be easier to port to decentralized systems?


Personal Notes:

Ahh, so with assignment problem, you'd need many "max cost 'do nothing'" values in the matrix for ONs. On the other hand, vertex-disjoint cycle cover just needs a bipartite graph for 'from' tasks and 'to' tasks, i.e., whether the tasks are offered or requested! Not sure how this would deal with duplicates.

Interestingly, even reduced to a graph problem, many solutions are via linear programming. That may be an inescapable route, but online? If the methods are iterative... :/ Wish I had studied more online algorithms.

So using the min flow over doubled bipartite graph for solving the vertex cycle cover problem with, say, Ford-Fulkerson algorithm, we're looking at O(#(request, offer) pairs)? Hmm . . ..
Except this is for finding the full cycle cover, not just the maximum... or...?

Okay, Kidney Exchange is a real-life example of offer-net like exchanges, including teh problem that anyone who needs a surgery can "opt out" at the last minute. Gotta look at how that's really done in practice! With positive crossmatches (highly sensitive antibodies preventing an otherwise compatible match), even seemingly matched pairs entering into the system can prove generally beneficial! Perhaps also a nuance with generic offer networks: even if you have a friend willing to make some exchange, entering your (offer, request)s into the system could lead to a better match (at least for the system as a whole).

TTCC seems interesting for (online) processing once preferences are added to an ON matcher: (potentially) providing Pareto efficient solutions. :o And there's a paper showing this, with the correct chain selection rule, is equivalent to TTC.

Representing cycles as (r1o1,r2o2,r3o3) could work, when writing papers at least.

> clearinghouse
-- Can also be used to more efficiently run markets where wages/money are involved.

Hmm, for testing, do we really need much more than just "identifying cycles"?
Could one then seek out strongly connected components, which is linear?
